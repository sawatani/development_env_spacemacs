- name: Check SBCL exists
  stat:
    path: /usr/local/bin/sbcl
  register: sbcl_exe

- name: clone SBCL
  git:
    repo: "{{sbcl.repo}}"
    dest: "{{sbcl.dir}}"
    version: "{{sbcl.version}}"
    force: no
  when: sbcl_exe.stat.exists == False

- name: install temporary SBCL
  become: yes
  apt:
    name: sbcl
    state: present
    update_cache: yes
  when: sbcl_exe.stat.exists == False

- name: build SBCL
  command: sh make.sh
  args:
    chdir: "{{sbcl.dir}}"
  when: sbcl_exe.stat.exists == False

- name: remove temporary SBCL
  become: yes
  apt:
    name: sbcl
    state: absent
    purge: yes
    update_cache: yes
  when: sbcl_exe.stat.exists == False

- name: install SBCL
  become: yes
  command: sh install.sh
  args:
    chdir: "{{sbcl.dir}}"
  when: sbcl_exe.stat.exists == False

- name: Check quicklisp exists
  stat:
    path: "{{ ansible_env.HOME }}/quicklisp/setup.lisp"
  register: quicklisp_dir

- name: temporary dir for Quicklisp
  tempfile:
    state: directory
  register: tmpdir
  when: quicklisp_dir.stat.exists == False

- name: get Quicklisp
  get_url:
    url: "{{ quicklisp.url }}"
    dest: "{{ tmpdir.path }}/installer.lisp"
  when: quicklisp_dir.stat.exists == False

- name: write batch for Quicklisp
  blockinfile:
    path: "{{ tmpdir.path }}/installer.lisp"
    create: yes
    marker: ;;; ansible
    block: |
      {{ quicklisp.batch }}
  when: quicklisp_dir.stat.exists == False

- name: install Quicklisp
  command: "bash -l -c 'sbcl --load {{ tmpdir.path }}/installer.lisp --eval \"(quit)\"'"
  when: quicklisp_dir.stat.exists == False

- name: remove temporary dir for Quicklisp
  file:
    path: "{{ tmpdir.path }}"
    state: absent
  when: quicklisp_dir.stat.exists == False

- name: Check Maxima exists
  stat:
    path: /usr/local/bin/maxima
  register: maxima_exe

- name: clone Maxima
  git:
    repo: "{{maxima.repo}}"
    dest: "{{maxima.dir}}"
    version: "{{maxima.version}}"
    force: no

- name: build Maxima
  command: "bash -l -c '{{ item }}'"
  args:
    chdir: "{{maxima.dir}}"
  with_items:
  - sh bootstrap
  - ./configure --enable-sbcl
  - make
  when: maxima_exe.stat.exists == False

- name: install Maxima
  become: yes
  command: "bash -l -c 'make install'"
  args:
    chdir: "{{maxima.dir}}"
  when: maxima_exe.stat.exists == False

- name: clone Maxima-Jupyter
  git:
    repo: "{{maxima_jupyter.repo}}"
    dest: "{{maxima_jupyter.dir}}"
    version: "{{maxima_jupyter.version}}"
    force: no

- name: install Maxima-Jupyter
  command: "bash -l -c 'python install-maxima-jupyter.py --user --root=`pwd`'"
  args:
    chdir: "{{maxima_jupyter.dir}}"

- name: get dir 'site-packages'
  command: "bash -l -c \"python -c 'import site; print(site.getsitepackages()[0])'\""
  register: site_packages

- name: put latex template
  become: yes
  copy:
    src: hidecode.tplx
    dest: "{{ site_packages.stdout }}/nbconvert/templates/latex/"

- name: ceate dir of code-highlight for Maxima
  become: yes
  file:
    path: "{{ site_packages.stdout }}/{{ item.dir }}/{{ item.dest_dir }}"
    state: directory
  with_items:
  - "{{ maxima_highlight }}"

- name: copy code-highlight for Maxima
  become: yes
  copy:
    remote_src: yes
    src: "{{ maxima_jupyter.dir }}/{{ item.src }}"
    dest: "{{ site_packages.stdout }}/{{ item.dir }}/{{ item.dest_dir }}/"
  with_items:
  - "{{ maxima_highlight }}"

- name: patch code-highlight for Maxima
  become: yes
  patch:
    remote_src: yes
    src: "{{ maxima_jupyter.dir }}/{{ item.patch.file }}"
    dest: "{{ site_packages.stdout }}/{{ item.dir }}/{{ item.patch.target }}"
  with_items:
  - "{{ maxima_highlight }}"
